import * as d from '../../declarations';
export declare class BuildContext implements d.BuildCtx {
    private config;
    private compilerCtx;
    appFileBuildCount: number;
    buildId: number;
    timestamp: string;
    buildResults: d.BuildResults;
    bundleBuildCount: number;
    changedExtensions: string[];
    collections: d.Collection[];
    components: string[];
    data: any;
    diagnostics: d.Diagnostic[];
    dirsAdded: string[];
    dirsDeleted: string[];
    entryModules: d.EntryModule[];
    entryPoints: d.EntryPoint[];
    externalStylesUpdated: string[];
    filesAdded: string[];
    filesChanged: string[];
    filesDeleted: string[];
    filesUpdated: string[];
    filesWritten: string[];
    global: d.ModuleFile;
    graphData: d.GraphData;
    hasCopyChanges: boolean;
    hasFinished: boolean;
    hasImageChanges: boolean;
    hasScriptChanges: boolean;
    hasSlot: boolean;
    hasStyleChanges: boolean;
    hasSvg: boolean;
    indexBuildCount: number;
    isRebuild: boolean;
    requiresFullBuild: boolean;
    startTime: number;
    styleBuildCount: number;
    stylesUpdated: {
        [styleId: string]: string;
    };
    timeSpan: d.LoggerTimeSpan;
    transpileBuildCount: number;
    validateTypesPromise: Promise<d.ValidateTypesResults>;
    constructor(config: d.Config, compilerCtx: d.CompilerCtx, watchResults?: d.WatchResults);
    setBuildTimestamp(): void;
    createTimeSpan(msg: string, debug?: boolean): {
        finish: (finishedMsg: string, color?: string, bold?: boolean, newLineSuffix?: boolean) => void;
    };
    readonly isActiveBuild: boolean;
    finish(): Promise<d.BuildResults>;
    shouldAbort(): boolean;
    validateTypesBuild(): Promise<void>;
}
