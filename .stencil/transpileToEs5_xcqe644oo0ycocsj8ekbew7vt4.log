/** @stencil/redux global **/
Context.store = (function () {
    var _store;
    function setStore(store) {
        _store = store;
    }
    function getState() {
        return _store && _store.getState();
    }
    function getStore() {
        return _store;
    }
    function mapDispatchToProps(component, props) {
        Object.keys(props).forEach(function (actionName) {
            var action = props[actionName];
            Object.defineProperty(component, actionName, {
                get: function () { return function () {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }
                    return action.apply(void 0, args)(_store.dispatch, _store.getState);
                }; },
                configurable: true,
                enumerable: true
            });
        });
    }
    function mapStateToProps(component, mapState) {
        // TODO: Don't listen for each component
        var _mapStateToProps = function (_component, _mapState) {
            var mergeProps = mapState(_store.getState());
            Object.keys(mergeProps).forEach(function (newPropName) {
                var newPropValue = mergeProps[newPropName];
                component[newPropName] = newPropValue;
                // TODO: can we define new props and still have change detection work?
            });
        };
        _store.subscribe(function () { return _mapStateToProps(component, mapState); });
        _mapStateToProps(component, mapState);
    }
    return {
        getStore: getStore,
        setStore: setStore,
        getState: getState,
        mapDispatchToProps: mapDispatchToProps,
        mapStateToProps: mapStateToProps
    };
})();
