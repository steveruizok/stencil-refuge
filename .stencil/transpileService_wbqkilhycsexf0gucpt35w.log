{"moduleFile":{"sourceFilePath":"/Users/stephenruiz/GitHub/stencil-refuge/src/components/actions/app.ts","localImports":["/Users/stephenruiz/GitHub/stencil-refuge/src/components/actions/index"],"externalImports":[],"potentialCmpRefs":[],"hasSlot":false,"hasSvg":false,"jsFilePath":"/Users/stephenruiz/GitHub/stencil-refuge/src/components/actions/app.js"},"jsText":"var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nimport { TypeKeys } from \"../actions/index\";\r\nexport const setGoogleServices = (service, map) => (dispatch, _getState) => __awaiter(this, void 0, void 0, function* () {\r\n    return dispatch({\r\n        type: TypeKeys.SET_GOOGLE_SERVICES,\r\n        service: service,\r\n        map: map\r\n    });\r\n});\r\nexport const setResultsFilter = (change) => (dispatch, _getState) => __awaiter(this, void 0, void 0, function* () {\r\n    return dispatch({\r\n        type: TypeKeys.SET_RESULTS_FILTER,\r\n        change: change\r\n    });\r\n});\r\nexport const setResults = (results = []) => (dispatch, _getState) => __awaiter(this, void 0, void 0, function* () {\r\n    return dispatch({\r\n        type: TypeKeys.SET_RESULTS,\r\n        results: results\r\n    });\r\n});\r\nexport const setMarkers = (markers = []) => (dispatch, _getState) => __awaiter(this, void 0, void 0, function* () {\r\n    return dispatch({\r\n        type: TypeKeys.SET_MARKERS,\r\n        markers: markers\r\n    });\r\n});\r\nexport const setPredictions = (predictions = []) => (dispatch, _getState) => __awaiter(this, void 0, void 0, function* () {\r\n    return dispatch({\r\n        type: TypeKeys.SET_PREDICTIONS,\r\n        predictions: predictions\r\n    });\r\n});\r\nexport const setUserLocation = (location) => (dispatch, _getState) => __awaiter(this, void 0, void 0, function* () {\r\n    return dispatch({\r\n        type: TypeKeys.SET_USER_LOCATION,\r\n        location: location\r\n    });\r\n});\r\nexport const setFocusedResult = (focused) => (dispatch, _getState) => __awaiter(this, void 0, void 0, function* () {\r\n    return dispatch({\r\n        type: TypeKeys.SET_FOCUSED_RESULT,\r\n        focused: focused\r\n    });\r\n});\r\nexport const setSelectedResult = (selected) => (dispatch, _getState) => __awaiter(this, void 0, void 0, function* () {\r\n    return dispatch({\r\n        type: TypeKeys.SET_SELECTED_RESULT,\r\n        selected: selected\r\n    });\r\n});\r\nexport const setLoading = (loading) => (dispatch, _getState) => __awaiter(this, void 0, void 0, function* () {\r\n    return dispatch({\r\n        type: TypeKeys.SET_LOADING,\r\n        loading: loading\r\n    });\r\n});\r\nexport const resetAll = () => (dispatch, _getState) => __awaiter(this, void 0, void 0, function* () {\r\n    return dispatch({\r\n        type: TypeKeys.RESET_ALL\r\n    });\r\n});\r\n"}