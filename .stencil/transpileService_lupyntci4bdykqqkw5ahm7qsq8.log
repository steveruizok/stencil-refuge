{"moduleFile":{"sourceFilePath":"/Users/stephenruiz/GitHub/stencil-refuge/src/components/refuge-results/refuge-results.tsx","localImports":["/Users/stephenruiz/GitHub/stencil-refuge/src/components/actions/app"],"externalImports":["@stencil/core","@stencil/redux","classnames","lodash","classnames","lodash"],"potentialCmpRefs":[{"tag":"refuge-result"}],"cmpMeta":{"tagNameMeta":"refuge-results","stylesMeta":{"$":{"externalStyles":[{"absolutePath":"/Users/stephenruiz/GitHub/stencil-refuge/src/components/refuge-results/refuge-results.css","cmpRelativePath":"refuge-results.css","originalComponentPath":"refuge-results.css"}]}},"assetsDirsMeta":[],"hostMeta":{},"dependencies":[],"jsdoc":{"name":"RefugeResults","documentation":"","type":"typeof RefugeResults"},"encapsulation":0,"componentClass":"RefugeResults","membersMeta":{"elem":{"memberType":7},"filter":{"memberType":5},"entries":{"memberType":5},"results":{"memberType":5},"focused":{"memberType":5},"store":{"memberType":3,"ctrlId":"store"}},"eventsMeta":[],"listenersMeta":[]},"hasSlot":false,"hasSvg":false,"jsFilePath":"/Users/stephenruiz/GitHub/stencil-refuge/src/components/refuge-results/refuge-results.js"},"jsText":"import { setResultsFilter, setFocusedResult } from \"../actions/app\";\r\nimport classNames from \"classnames\";\r\nimport _ from \"lodash\";\r\nexport class RefugeResults {\r\n    constructor() {\r\n        this.entries = [];\r\n        this.results = [];\r\n        this.getEntries = () => {\r\n            let results = this.results.filter(result => {\r\n                _.every(_.map(this.filter, (value, key) => {\r\n                    return result[key] === value;\r\n                }));\r\n            });\r\n            // let results = this.results.filter(result => {\r\n            //   for (let key in this.filter) {\r\n            //     if (result[key] === this.filter[key]) {\r\n            //       return false;\r\n            //     }\r\n            //   }\r\n            //   return true;\r\n            // });\r\n            return results.map(r => {\r\n                let fcs = r === this.focused;\r\n                return (h(\"refuge-result\", { result: r, focused: fcs, onClick: () => {\r\n                        this.setFocusedResult(r);\r\n                    } }));\r\n            });\r\n        };\r\n    }\r\n    componentWillLoad() {\r\n        this.store.mapDispatchToProps(this, {\r\n            setResultsFilter,\r\n            setFocusedResult\r\n        });\r\n        this.store.mapStateToProps(this, state => {\r\n            const { app: { filter, focused, results } } = state;\r\n            return { filter, focused, results };\r\n        });\r\n    }\r\n    componentDidUpdate() {\r\n        if (!this.focused) {\r\n            return;\r\n        }\r\n        let focusedIndex = this.results.indexOf(this.focused);\r\n        let focusedEntry = this.entries[focusedIndex];\r\n        if (!focusedEntry) {\r\n            return;\r\n        }\r\n        document.getElementById(\"results-scroll\").scrollTop =\r\n            focusedEntry.elm.offsetTop;\r\n    }\r\n    render() {\r\n        this.entries = this.getEntries();\r\n        let resultsClass = classNames({\r\n            \"refuge-results\": true,\r\n            open: this.results.length > 0\r\n        });\r\n        return (h(\"div\", { id: \"results-scroll\", class: resultsClass }, this.entries));\r\n    }\r\n    static get is() { return \"refuge-results\"; }\r\n    static get properties() { return {\r\n        \"elem\": {\r\n            \"elementRef\": true\r\n        },\r\n        \"entries\": {\r\n            \"state\": true\r\n        },\r\n        \"filter\": {\r\n            \"state\": true\r\n        },\r\n        \"focused\": {\r\n            \"state\": true\r\n        },\r\n        \"results\": {\r\n            \"state\": true\r\n        },\r\n        \"store\": {\r\n            \"context\": \"store\"\r\n        }\r\n    }; }\r\n    static get style() { return \"/**style-placeholder:refuge-results:**/\"; }\r\n}\r\n"}