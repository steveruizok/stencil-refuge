{"moduleFile":{"sourceFilePath":"/Users/stephenruiz/GitHub/stencil-refuge/src/components/app-root/app-root.tsx","localImports":["/Users/stephenruiz/GitHub/stencil-refuge/src/components/store","/Users/stephenruiz/GitHub/stencil-refuge/src/components/actions/app"],"externalImports":["@stencil/core","@stencil/redux"],"potentialCmpRefs":[{"tag":"refuge-header"},{"tag":"refuge-map"},{"tag":"refuge-filter"},{"tag":"refuge-results"},{"tag":"refuge-predictions"},{"tag":"refuge-detail"}],"cmpMeta":{"tagNameMeta":"app-root","stylesMeta":{"$":{"externalStyles":[{"absolutePath":"/Users/stephenruiz/GitHub/stencil-refuge/src/components/app-root/app-root.css","cmpRelativePath":"app-root.css","originalComponentPath":"app-root.css"}]}},"assetsDirsMeta":[],"hostMeta":{},"dependencies":[],"jsdoc":{"name":"AppRoot","documentation":"","type":"typeof AppRoot"},"encapsulation":0,"componentClass":"AppRoot","membersMeta":{"map":{"memberType":5},"service":{"memberType":5},"filter":{"memberType":5},"loading":{"memberType":5},"autocomplete":{"memberType":5},"results":{"memberType":5},"markers":{"memberType":5},"focused":{"memberType":5},"selected":{"memberType":5},"location":{"memberType":5},"store":{"memberType":3,"ctrlId":"store"}},"eventsMeta":[],"listenersMeta":[]},"hasSlot":false,"hasSvg":false,"jsFilePath":"/Users/stephenruiz/GitHub/stencil-refuge/src/components/app-root/app-root.js"},"jsText":"var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nimport { configureStore } from \"../store\";\r\nimport { setResults, setMarkers, setUserLocation, setFocusedResult, setSelectedResult, setLoading } from \"../actions/app\";\r\nexport class AppRoot {\r\n    constructor() {\r\n        this.loading = true;\r\n        // Update the user location on the map\r\n        this.setUserPosition = position => {\r\n            this.setUserLocation(new google.maps.LatLng(position.coords.latitude, position.coords.longitude));\r\n            if (this.userLocationMarker === null) {\r\n                this.setLoading(false);\r\n                return;\r\n            }\r\n            this.userLocationMarker = new google.maps.Marker({\r\n                position: this.location,\r\n                map: this.map,\r\n                icon: {\r\n                    path: google.maps.SymbolPath[position.heading ? \"BACKWARD_CLOSED_ARROW\" : \"CIRCLE\"],\r\n                    scale: 3\r\n                }\r\n            });\r\n            this.userLocationMarker.icon.rotation = position.heading;\r\n            this.userLocationMarker.position = this.location;\r\n            this.map.panTo(this.location);\r\n            this.setLoading(false);\r\n            // testing\r\n            // this.searchByUserLocation();\r\n        };\r\n        // Make a search using the user location\r\n        this.searchByUserLocation = () => {\r\n            if (!this.location) {\r\n                return;\r\n            }\r\n            this.getRefugeRestroomResults(this.location);\r\n            let input = document.getElementById(\"search-input\");\r\n            input.value = \"My Location\";\r\n        };\r\n        // Get geography from an autocomplete prediction and search\r\n        this.searchByPrediction = prediction => {\r\n            if (prediction === undefined) {\r\n                this.searchByUserLocation();\r\n                return;\r\n            }\r\n            this.service.getDetails({\r\n                placeId: prediction.place_id\r\n            }, details => {\r\n                this.getRefugeRestroomResults(details.geometry.location);\r\n            });\r\n        };\r\n        // Get results from refuge API\r\n        this.getRefugeRestroomResults = (latlng) => {\r\n            this.clearMarkers();\r\n            this.setResults([]);\r\n            this.setLoading(true);\r\n            // this.map.panTo(latlng);\r\n            let url = \"https://cors-anywhere.herokuapp.com/\" +\r\n                \"https://www.refugerestrooms.org/api/v1/restrooms/by_location.json?\" +\r\n                `lat=${latlng.lat()}&lng=${latlng.lng()}`;\r\n            fetch(url, {\r\n                method: \"GET\"\r\n            }).then(res => {\r\n                if (!res.ok) {\r\n                    throw res.statusText;\r\n                }\r\n                res.json().then(results => {\r\n                    this.setResults(results);\r\n                    this.getMarkers();\r\n                    this.setBounds();\r\n                });\r\n            });\r\n        };\r\n        // Get a new set of markers from the refuge results\r\n        this.getMarkers = () => {\r\n            let markers;\r\n            markers = this.results.map(result => {\r\n                let marker = new google.maps.Marker({\r\n                    map: this.map,\r\n                    position: new google.maps.LatLng(result.latitude, result.longitude),\r\n                    title: result.name,\r\n                    icon: \"assets/icons/marker-default.svg\"\r\n                });\r\n                marker.addListener(\"click\", () => {\r\n                    if (this.selected === result) {\r\n                        this.setSelectedResult(undefined);\r\n                        return;\r\n                    }\r\n                    if (this.focused === result) {\r\n                        this.setSelectedResult(result);\r\n                        return;\r\n                    }\r\n                    this.setFocusedResult(result);\r\n                });\r\n                return marker;\r\n            });\r\n            this.setMarkers(markers);\r\n        };\r\n        // Set map bounds to current markers\r\n        this.setBounds = () => {\r\n            let bounds = new google.maps.LatLngBounds();\r\n            this.markers.forEach(marker => {\r\n                bounds.extend(marker.getPosition());\r\n            });\r\n            this.map.fitBounds(bounds);\r\n            this.setLoading(false);\r\n        };\r\n        // Update which markers are visible\r\n        this.updateMarkers = () => {\r\n            this.results.forEach((res, i) => {\r\n                let ok = true;\r\n                for (let key in this.filter) {\r\n                    if (this.filter[key] === true && ok) {\r\n                        ok = res[key] === this.filter[key];\r\n                    }\r\n                }\r\n                let image = \"marker-default\";\r\n                if (res === this.focused) {\r\n                    image = \"marker-focused\";\r\n                }\r\n                this.markers[i].setIcon(`/assets/icons/${image}.svg`);\r\n                this.markers[i].setVisible(ok);\r\n            });\r\n        };\r\n        this.clearMarkers = () => {\r\n            this.markers.forEach(function (marker) {\r\n                marker.setMap(null);\r\n            });\r\n            this.setFocusedResult(undefined);\r\n            this.setLoading(false);\r\n        };\r\n    }\r\n    loadScript() {\r\n        return new Promise(resolve => {\r\n            if (google) {\r\n                console.log(\"google maps is ok\");\r\n                resolve();\r\n            }\r\n            this.script = document.createElement(\"script\");\r\n            this.script.src =\r\n                \"https://maps.googleapis.com/maps/api/js?key=AIzaSyBn5_4mxpPCKRVuLL1TlL_P62lNXInDXHA&libraries=places\";\r\n            document.body.appendChild(this.script);\r\n            resolve();\r\n        });\r\n    }\r\n    componentWillLoad() {\r\n        this.store.setStore(configureStore(undefined));\r\n        this.store.mapStateToProps(this, state => {\r\n            const { app: { filter, results, markers, location, focused, selected } } = state;\r\n            return { filter, results, markers, location, focused, selected };\r\n        });\r\n        this.store.mapDispatchToProps(this, {\r\n            setResults,\r\n            setMarkers,\r\n            setUserLocation,\r\n            setFocusedResult,\r\n            setSelectedResult,\r\n            setLoading\r\n        });\r\n    }\r\n    componentDidLoad() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            yield this.loadScript();\r\n            this.script.addEventListener(\"load\", () => __awaiter(this, void 0, void 0, function* () {\r\n                this.map = new google.maps.Map(document.getElementById(\"refuge-map\"), {\r\n                    center: { lat: -33.8688, lng: 151.2195 },\r\n                    zoom: 13,\r\n                    disableDefaultUI: true\r\n                });\r\n                this.service = new google.maps.places.PlacesService(this.map);\r\n                this.autocomplete = new google.maps.places.AutocompleteService();\r\n                if (\"geolocation\" in navigator) {\r\n                    navigator.geolocation.getCurrentPosition(this.setUserPosition, () => {\r\n                        this.setLoading(false);\r\n                    });\r\n                    // navigator.geolocation.watchPosition(this.updateUserPosition);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    render() {\r\n        this.updateMarkers();\r\n        return [\r\n            h(\"refuge-header\", { handleSearch: this.searchByPrediction, autocomplete: this.autocomplete }),\r\n            h(\"refuge-map\", { id: \"refuge-map\" }),\r\n            h(\"refuge-filter\", null),\r\n            h(\"refuge-results\", { results: this.results }),\r\n            h(\"refuge-predictions\", null),\r\n            h(\"refuge-detail\", null)\r\n            // <div class={overlayClasses}>\r\n            //   <button class={buttonClasses} onClick={this.searchByUserLocation}>\r\n            //     find a restroom near you\r\n            //     <span class=\"inline-icon material-icons\">my_location</span>\r\n            //   </button>\r\n            //   <p class=\"copyright\">\r\n            //     <a class=\"shy-link\" href=\"http://twitter.com/steveruizok\">\r\n            //       @steveruizok\r\n            //     </a>{\" \"}\r\n            //     2018\r\n            //   </p>\r\n            // </div>\r\n        ];\r\n    }\r\n    static get is() { return \"app-root\"; }\r\n    static get properties() { return {\r\n        \"autocomplete\": {\r\n            \"state\": true\r\n        },\r\n        \"filter\": {\r\n            \"state\": true\r\n        },\r\n        \"focused\": {\r\n            \"state\": true\r\n        },\r\n        \"loading\": {\r\n            \"state\": true\r\n        },\r\n        \"location\": {\r\n            \"state\": true\r\n        },\r\n        \"map\": {\r\n            \"state\": true\r\n        },\r\n        \"markers\": {\r\n            \"state\": true\r\n        },\r\n        \"results\": {\r\n            \"state\": true\r\n        },\r\n        \"selected\": {\r\n            \"state\": true\r\n        },\r\n        \"service\": {\r\n            \"state\": true\r\n        },\r\n        \"store\": {\r\n            \"context\": \"store\"\r\n        }\r\n    }; }\r\n    static get style() { return \"/**style-placeholder:app-root:**/\"; }\r\n}\r\n"}