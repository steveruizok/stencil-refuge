{"moduleFile":{"sourceFilePath":"/Users/stephenruiz/GitHub/stencil-refuge/src/components/reducers/app.ts","localImports":["/Users/stephenruiz/GitHub/stencil-refuge/src/components/actions/index"],"externalImports":[],"potentialCmpRefs":[],"hasSlot":false,"hasSvg":false,"jsFilePath":"/Users/stephenruiz/GitHub/stencil-refuge/src/components/reducers/app.js"},"jsText":"import { TypeKeys } from \"../actions/index\";\r\nconst getInitialState = () => {\r\n    return {\r\n        service: undefined,\r\n        map: undefined,\r\n        filter: {\r\n            accessible: false,\r\n            unisex: false,\r\n            changing_table: false\r\n        },\r\n        results: [],\r\n        markers: [],\r\n        predictions: [],\r\n        location: undefined,\r\n        focused: undefined,\r\n        selected: undefined,\r\n        loading: false\r\n    };\r\n};\r\nconst app = (state = getInitialState(), action) => {\r\n    switch (action.type) {\r\n        case TypeKeys.SET_GOOGLE_SERVICES: {\r\n            return Object.assign({}, state, { map: action.map, service: action.service });\r\n        }\r\n        case TypeKeys.SET_RESULTS_FILTER: {\r\n            let newFilter = Object.assign({}, state.filter, action.change);\r\n            return Object.assign({}, state, { filter: newFilter });\r\n        }\r\n        case TypeKeys.SET_RESULTS: {\r\n            if (!state.loading) {\r\n                return state;\r\n            }\r\n            return Object.assign({}, state, { results: action.results });\r\n        }\r\n        case TypeKeys.SET_MARKERS: {\r\n            if (!state.loading) {\r\n                return state;\r\n            }\r\n            return Object.assign({}, state, { markers: action.markers });\r\n        }\r\n        case TypeKeys.SET_PREDICTIONS: {\r\n            return Object.assign({}, state, { predictions: action.predictions });\r\n        }\r\n        case TypeKeys.SET_USER_LOCATION: {\r\n            return Object.assign({}, state, { location: action.location });\r\n        }\r\n        case TypeKeys.SET_FOCUSED_RESULT: {\r\n            return Object.assign({}, state, { focused: action.focused });\r\n        }\r\n        case TypeKeys.SET_SELECTED_RESULT: {\r\n            return Object.assign({}, state, { selected: action.selected });\r\n        }\r\n        case TypeKeys.SET_LOADING: {\r\n            return Object.assign({}, state, { loading: action.loading });\r\n        }\r\n        case TypeKeys.RESET_ALL: {\r\n            state.markers.forEach(function (marker) {\r\n                marker.setMap(null);\r\n            });\r\n            return Object.assign({}, state, { loading: false, results: [], focused: undefined, selected: undefined, predictions: [], markers: [] });\r\n        }\r\n    }\r\n    return state;\r\n};\r\nexport default app;\r\n"}