{"moduleFile":{"sourceFilePath":"/Users/stephenruiz/GitHub/stencil-refuge/src/components/refuge-filter/refuge-filter.tsx","localImports":["/Users/stephenruiz/GitHub/stencil-refuge/src/components/actions/app"],"externalImports":["@stencil/core","@stencil/redux","classnames","classnames"],"potentialCmpRefs":[{"tag":"ref-icon"}],"cmpMeta":{"tagNameMeta":"refuge-filter","stylesMeta":{"$":{"externalStyles":[{"absolutePath":"/Users/stephenruiz/GitHub/stencil-refuge/src/components/refuge-filter/refuge-filter.css","cmpRelativePath":"refuge-filter.css","originalComponentPath":"refuge-filter.css"}]}},"assetsDirsMeta":[],"hostMeta":{},"dependencies":[],"jsdoc":{"name":"RefugeFilter","documentation":"","type":"typeof RefugeFilter"},"encapsulation":0,"componentClass":"RefugeFilter","membersMeta":{"markers":{"memberType":5},"filter":{"memberType":5},"store":{"memberType":3,"ctrlId":"store"}},"eventsMeta":[],"listenersMeta":[]},"hasSlot":false,"hasSvg":false,"jsFilePath":"/Users/stephenruiz/GitHub/stencil-refuge/src/components/refuge-filter/refuge-filter.js"},"jsText":"import { setResultsFilter, setResults, setMarkers } from \"../actions/app\";\r\nimport classNames from \"classnames\";\r\nexport class RefugeFilter {\r\n    constructor() {\r\n        this.getActive = (bool) => {\r\n            return classNames({\r\n                \"inline-icon material-icons\": true,\r\n                \"filter-icon\": true,\r\n                inactive: !bool\r\n            });\r\n        };\r\n        this.clearResults = () => {\r\n            this.clearMarkers();\r\n            this.setResults([]);\r\n        };\r\n        this.clearMarkers = () => {\r\n            this.markers.forEach(function (marker) {\r\n                marker.setMap(null);\r\n            });\r\n            this.setMarkers([]);\r\n        };\r\n    }\r\n    componentWillLoad() {\r\n        this.store.mapDispatchToProps(this, {\r\n            setResultsFilter,\r\n            setResults,\r\n            setMarkers\r\n        });\r\n        this.store.mapStateToProps(this, state => {\r\n            const { app: { filter, markers, results } } = state;\r\n            return { filter, markers, results };\r\n        });\r\n    }\r\n    render() {\r\n        let classes = classNames({\r\n            \"refuge-filter\": true,\r\n            hidden: this.markers.length <= 0\r\n        });\r\n        let results = \"\";\r\n        if (this.markers.length > 0) {\r\n            results = `(${this.markers.length})`;\r\n        }\r\n        return (h(\"div\", { class: classes },\r\n            h(\"div\", { class: \"left\" },\r\n                h(\"span\", { class: \"filter label\" },\r\n                    \"Restrooms \",\r\n                    results)),\r\n            h(\"div\", { class: \"right\" },\r\n                h(\"ref-icon\", { icon: \"accessible\" }),\r\n                h(\"ref-icon\", { icon: \"unisex\" }),\r\n                h(\"ref-icon\", { icon: \"changing_table\" }))));\r\n    }\r\n    static get is() { return \"refuge-filter\"; }\r\n    static get properties() { return {\r\n        \"filter\": {\r\n            \"state\": true\r\n        },\r\n        \"markers\": {\r\n            \"state\": true\r\n        },\r\n        \"store\": {\r\n            \"context\": \"store\"\r\n        }\r\n    }; }\r\n    static get style() { return \"/**style-placeholder:refuge-filter:**/\"; }\r\n}\r\n"}