{"moduleFile":{"sourceFilePath":"/Users/stephenruiz/GitHub/stencil-refuge/src/components/refuge-header/refuge-header.tsx","localImports":["/Users/stephenruiz/GitHub/stencil-refuge/src/components/actions/app"],"externalImports":["@stencil/core","@stencil/redux","classnames","classnames"],"potentialCmpRefs":[{"tag":"refuge-prediction"}],"cmpMeta":{"tagNameMeta":"refuge-header","stylesMeta":{"$":{"externalStyles":[{"absolutePath":"/Users/stephenruiz/GitHub/stencil-refuge/src/components/refuge-header/refuge-header.css","cmpRelativePath":"refuge-header.css","originalComponentPath":"refuge-header.css"}]}},"assetsDirsMeta":[],"hostMeta":{},"dependencies":[],"jsdoc":{"name":"RefugeHeader","documentation":"","type":"typeof RefugeHeader"},"encapsulation":0,"componentClass":"RefugeHeader","membersMeta":{"predictions":{"memberType":5},"markers":{"memberType":5},"loading":{"memberType":5},"store":{"memberType":3,"ctrlId":"store"},"searchBar":{"memberType":1,"attribName":"search-bar","attribType":{"text":"boolean","typeReferences":{}},"reflectToAttrib":false,"propType":3,"jsdoc":{"name":"searchBar","documentation":"","type":"boolean"}},"handleSearch":{"memberType":1,"attribName":"handle-search","attribType":{"text":"Function","typeReferences":{"Function":{"referenceLocation":"global"}}},"reflectToAttrib":false,"propType":0,"jsdoc":{"name":"handleSearch","documentation":"","type":"Function"}}},"eventsMeta":[],"listenersMeta":[]},"hasSlot":false,"hasSvg":false,"jsFilePath":"/Users/stephenruiz/GitHub/stencil-refuge/src/components/refuge-header/refuge-header.js"},"jsText":"import { setPredictions, setResults, setMarkers } from \"../actions/app\";\r\nimport classnames from \"classnames\";\r\nexport class RefugeHeader {\r\n    constructor() {\r\n        this.searchBar = true;\r\n        this.clearPredictions = () => {\r\n            this.setPredictions([]);\r\n        };\r\n        this.getPredictions = event => {\r\n            let value = event.target.value;\r\n            if (value === undefined || value.length === 0) {\r\n                this.clearPredictions();\r\n                return;\r\n            }\r\n            this.hasText = true;\r\n            this.autocomplete.getPlacePredictions({\r\n                input: value\r\n            }, predictions => {\r\n                if (predictions === null || predictions.length === 0) {\r\n                    this.clearPredictions();\r\n                    return;\r\n                }\r\n                let newPredictions = predictions.map(p => {\r\n                    return (h(\"refuge-prediction\", { onClick: () => {\r\n                            this.searchByPrediction(p);\r\n                        } }, p.description));\r\n                });\r\n                this.setPredictions(newPredictions);\r\n            });\r\n        };\r\n        // handle search\r\n        this.searchByPrediction = prediction => {\r\n            this.input.value = prediction.structured_formatting.main_text;\r\n            this.handleSearch(prediction);\r\n            this.clearPredictions();\r\n        };\r\n        this.searchByLocation = () => {\r\n            this.input.value = \"My Location\";\r\n            this.handleSearch();\r\n            this.clearPredictions();\r\n        };\r\n        this.handleRightClick = () => {\r\n            if (this.input.value.length > 0) {\r\n                this.input.value = null;\r\n                this.clearPredictions();\r\n                this.setResults([]);\r\n                this.markers.forEach(function (marker) {\r\n                    marker.setMap(null);\r\n                });\r\n            }\r\n            else {\r\n                this.searchByLocation();\r\n            }\r\n        };\r\n    }\r\n    componentWillLoad() { }\r\n    componentDidLoad() {\r\n        this.store.mapDispatchToProps(this, {\r\n            setPredictions,\r\n            setResults,\r\n            setMarkers\r\n        });\r\n        this.store.mapStateToProps(this, state => {\r\n            const { app: { service, map, predictions, markers, loading } } = state;\r\n            return { service, map, predictions, markers, loading };\r\n        });\r\n        this.autocomplete = new google.maps.places.AutocompleteService();\r\n    }\r\n    // Rendering Methods\r\n    render() {\r\n        let containerClasses, rightIcon, rightIconClasses;\r\n        if (this.loading) {\r\n            rightIcon = \"loading\";\r\n        }\r\n        else {\r\n            if (this.input && this.input.value.length > 0) {\r\n                rightIcon = \"close\";\r\n            }\r\n            else {\r\n                rightIcon = \"my_location\";\r\n            }\r\n        }\r\n        rightIconClasses = classnames({\r\n            \"header-icon\": true,\r\n            \"right-icon\": true,\r\n            \"material-icons\": true,\r\n            loading: rightIcon == \"my_location\",\r\n            location: rightIcon == \"my_location\"\r\n        });\r\n        containerClasses = classnames({\r\n            \"search-container\": true,\r\n            \"bottom-border\": this.hasText\r\n        });\r\n        return (h(\"div\", { class: containerClasses },\r\n            h(\"input\", { class: \"search-input\", placeholder: \"Search...\", ref: el => {\r\n                    this.input = el;\r\n                }, onBlur: () => {\r\n                    setTimeout(this.clearPredictions, 150);\r\n                }, onInput: this.getPredictions, onFocus: this.getPredictions }),\r\n            h(\"span\", { class: \"header-icon left-icon material-icons\" }, \"search\"),\r\n            h(\"span\", { class: rightIconClasses, onClick: this.handleRightClick }, rightIcon)));\r\n    }\r\n    static get is() { return \"refuge-header\"; }\r\n    static get properties() { return {\r\n        \"handleSearch\": {\r\n            \"type\": \"Any\",\r\n            \"attr\": \"handle-search\"\r\n        },\r\n        \"loading\": {\r\n            \"state\": true\r\n        },\r\n        \"markers\": {\r\n            \"state\": true\r\n        },\r\n        \"predictions\": {\r\n            \"state\": true\r\n        },\r\n        \"searchBar\": {\r\n            \"type\": Boolean,\r\n            \"attr\": \"search-bar\"\r\n        },\r\n        \"store\": {\r\n            \"context\": \"store\"\r\n        }\r\n    }; }\r\n    static get style() { return \"/**style-placeholder:refuge-header:**/\"; }\r\n}\r\n"}