{"moduleFile":{"sourceFilePath":"/Users/stephenruiz/GitHub/stencil-refuge/src/components/app-root/app-root.tsx","localImports":["/Users/stephenruiz/GitHub/stencil-refuge/src/components/store","/Users/stephenruiz/GitHub/stencil-refuge/src/components/actions/app"],"externalImports":["@stencil/core","@stencil/redux"],"potentialCmpRefs":[{"tag":"refuge-header"},{"tag":"refuge-map"},{"tag":"refuge-filter"},{"tag":"refuge-results"},{"tag":"refuge-predictions"}],"cmpMeta":{"tagNameMeta":"app-root","stylesMeta":{"$":{"externalStyles":[{"absolutePath":"/Users/stephenruiz/GitHub/stencil-refuge/src/components/app-root/app-root.css","cmpRelativePath":"app-root.css","originalComponentPath":"app-root.css"}]}},"assetsDirsMeta":[],"hostMeta":{},"dependencies":[],"jsdoc":{"name":"AppRoot","documentation":"","type":"typeof AppRoot"},"encapsulation":0,"componentClass":"AppRoot","membersMeta":{"map":{"memberType":5},"service":{"memberType":5},"filter":{"memberType":5},"loading":{"memberType":5},"results":{"memberType":5},"markers":{"memberType":5},"focused":{"memberType":5},"selected":{"memberType":5},"location":{"memberType":5},"store":{"memberType":3,"ctrlId":"store"}},"eventsMeta":[],"listenersMeta":[]},"hasSlot":false,"hasSvg":false,"jsFilePath":"/Users/stephenruiz/GitHub/stencil-refuge/src/components/app-root/app-root.js"},"jsText":"import { configureStore } from \"../store\";\r\nimport { setResults, setMarkers, setUserLocation, setFocusedResult, setSelectedResult, setLoading } from \"../actions/app\";\r\nexport class AppRoot {\r\n    constructor() {\r\n        this.loading = true;\r\n        // Update the user location on the map\r\n        this.setUserPosition = position => {\r\n            this.setLoading(true);\r\n            this.setUserLocation(new google.maps.LatLng(position.coords.latitude, position.coords.longitude));\r\n            if (this.userLocationMarker === null) {\r\n                this.setLoading(false);\r\n                return;\r\n            }\r\n            this.userLocationMarker = new google.maps.Marker({\r\n                position: this.location,\r\n                map: this.map,\r\n                icon: {\r\n                    path: google.maps.SymbolPath[position.heading ? \"BACKWARD_CLOSED_ARROW\" : \"CIRCLE\"],\r\n                    scale: 3\r\n                }\r\n            });\r\n            this.userLocationMarker.icon.rotation = position.heading;\r\n            this.userLocationMarker.position = this.location;\r\n            this.map.panTo(this.location);\r\n            // testing\r\n            this.searchByUserLocation();\r\n        };\r\n        // Make a search using the user location\r\n        this.searchByUserLocation = () => {\r\n            if (this.location) {\r\n                this.getRefugeRestroomResults(this.location);\r\n                let input = (h(HTMLInputElement, null,\r\n                    \"document.getElementById(\\\"search-input\\\")); // console.log(input); input.value = \\\"My Location\\\"; } }; // Get geography from an autocomplete prediction and search searchByPrediction = prediction => \",\r\n                ,\r\n                    \" (prediction === undefined) \",\r\n                    this.searchByUserLocation(),\r\n                    \"return; } this.setLoading(true); this.service.getDetails(\",\r\n                    placeId,\r\n                    \" prediction.place_id }, details => \",\r\n                    this.getRefugeRestroomResults(details.geometry.location),\r\n                    \"} ); }; // Get results from refuge API getRefugeRestroomResults = (latlng: any) => \",\r\n                    this.setLoading(true),\r\n                    \"this.clearMarkers(); this.setResults([]); // this.map.panTo(latlng); let url = \\\"https://cors-anywhere.herokuapp.com/\\\" + \\\"https://www.refugerestrooms.org/api/v1/restrooms/by_location.json?\\\" + `lat=$\",\r\n                    latlng.lat(),\r\n                    \"&lng=$\",\r\n                    latlng.lng(),\r\n                    \"`; fetch(url, \",\r\n                    method,\r\n                    \" \\\"GET\\\" }).then(res => \",\r\n                ,\r\n                    \" (!res.ok) \",\r\n                ,\r\n                    \" res.statusText; } res.json().then(results => \",\r\n                    this.setResults(results),\r\n                    \"this.getMarkers(); this.setBounds(); this.setLoading(false); }); }); }; // Get a new set of markers from the refuge results getMarkers = () => \",\r\n                    let,\r\n                    \"; markers = this.results.map(result => \",\r\n                    let,\r\n                    \" = new window[\\\"Marker\\\"](\",\r\n                    map,\r\n                    \" this.map, position: new google.maps.LatLng(result.latitude, result.longitude), title: result.name, // animation: google.maps.Animation.DROP icon: \",\r\n                    path,\r\n                    \" window[\\\"MAP_PIN\\\"], fillColor: \\\"#00CCBB\\\", fillOpacity: 1, strokeColor: \\\"\\\", strokeWeight: 0 } }); marker.addListener(\\\"click\\\", () => \",\r\n                    this.setFocusedResult(result),\r\n                    \"}); return marker; }); this.setMarkers(markers); }; // Set map bounds to current markers setBounds = () => \",\r\n                    let,\r\n                    \" = new google.maps.LatLngBounds(); this.markers.forEach(marker => \",\r\n                    bounds.extend(marker.getPosition()),\r\n                    \"}); this.map.fitBounds(bounds); }; // Update which markers are visible updateMarkers = () => \",\r\n                    this.results.forEach((res, i) => {\r\n                        let ok = true;\r\n                        for (let key in this.filter) {\r\n                            if (this.filter[key] === true && ok) {\r\n                                ok = res[key] === this.filter[key];\r\n                            }\r\n                        }\r\n                        let color = \"#0072d9\";\r\n                        if (res === this.focused) {\r\n                            color = \"#e93f3b\";\r\n                        }\r\n                        this.markers[i].setIcon({\r\n                            path: window[\"MAP_PIN\"],\r\n                            fillColor: color,\r\n                            fillOpacity: 1,\r\n                            strokeColor: \"#FFFFFF\",\r\n                            strokeWeight: 2\r\n                        });\r\n                        this.markers[i].setVisible(ok);\r\n                    }),\r\n                    \"}; clearMarkers = () => \",\r\n                    this.markers.forEach(function (marker) {\r\n                        marker.setMap(null);\r\n                    }),\r\n                    \"this.setFocusedResult(undefined); }; render() \",\r\n                    this.updateMarkers(),\r\n                    \"return [\",\r\n                    h(\"refuge-header\", { handleSearch: this.searchByPrediction }),\r\n                    \",\",\r\n                    h(\"refuge-map\", { id: \"refuge-map\" }),\r\n                    \",\",\r\n                    h(\"refuge-filter\", null),\r\n                    \",\",\r\n                    h(\"refuge-results\", { results: this.results }),\r\n                    \",\",\r\n                    h(\"refuge-predictions\", null)\r\n                // <div class={overlayClasses}>\r\n                //   <button class={buttonClasses} onClick={this.searchByUserLocation}>\r\n                //     find a restroom near you\r\n                //     <span class=\"inline-icon material-icons\">my_location</span>\r\n                //   </button>\r\n                //   <p class=\"copyright\">\r\n                //     <a class=\"shy-link\" href=\"http://twitter.com/steveruizok\">\r\n                //       @steveruizok\r\n                //     </a>{\" \"}\r\n                //     2018\r\n                //   </p>\r\n                // </div>\r\n                ,\r\n                    \"// \",\r\n                    h(\"div\", { class: overlayClasses },\r\n                        \"//   \",\r\n                        h(\"button\", { class: buttonClasses, onClick: this.searchByUserLocation },\r\n                            \"//     find a restroom near you //     \",\r\n                            h(\"span\", { class: \"inline-icon material-icons\" }, \"my_location\")\r\n                        //   </button>\r\n                        //   <p class=\"copyright\">\r\n                        //     <a class=\"shy-link\" href=\"http://twitter.com/steveruizok\">\r\n                        //       @steveruizok\r\n                        //     </a>{\" \"}\r\n                        //     2018\r\n                        //   </p>\r\n                        // </div>\r\n                        ,\r\n                            \"//   \")\r\n                    //   <p class=\"copyright\">\r\n                    //     <a class=\"shy-link\" href=\"http://twitter.com/steveruizok\">\r\n                    //       @steveruizok\r\n                    //     </a>{\" \"}\r\n                    //     2018\r\n                    //   </p>\r\n                    // </div>\r\n                    ,\r\n                        \"//   \",\r\n                        h(\"p\", { class: \"copyright\" },\r\n                            \"//     \",\r\n                            h(\"a\", { class: \"shy-link\", href: \"http://twitter.com/steveruizok\" }, \"//       @steveruizok //     \"),\r\n                            \" \",\r\n                            \"//     2018 //   \")\r\n                    // </div>\r\n                    ,\r\n                        \"// \"),\r\n                    \"]; } }\"));\r\n            }\r\n        };\r\n    }\r\n    componentWillLoad() {\r\n        this.store.setStore(configureStore(undefined));\r\n        this.store.mapStateToProps(this, state => {\r\n            const { app: { filter, results, markers, location, focused, selected } } = state;\r\n            return { filter, results, markers, location, focused, selected };\r\n        });\r\n        this.store.mapDispatchToProps(this, {\r\n            setResults,\r\n            setMarkers,\r\n            setUserLocation,\r\n            setFocusedResult,\r\n            setSelectedResult,\r\n            setLoading\r\n        });\r\n    }\r\n    componentDidLoad() {\r\n        this.map = new google.maps.Map(document.getElementById(\"refuge-map\"), {\r\n            center: { lat: -33.8688, lng: 151.2195 },\r\n            zoom: 13,\r\n            disableDefaultUI: true\r\n        });\r\n        this.service = new google.maps.places.PlacesService(this.map);\r\n        if (\"geolocation\" in navigator) {\r\n            navigator.geolocation.getCurrentPosition(this.setUserPosition);\r\n            // navigator.geolocation.watchPosition(this.updateUserPosition);\r\n        }\r\n    }\r\n    static get is() { return \"app-root\"; }\r\n    static get properties() { return {\r\n        \"filter\": {\r\n            \"state\": true\r\n        },\r\n        \"focused\": {\r\n            \"state\": true\r\n        },\r\n        \"loading\": {\r\n            \"state\": true\r\n        },\r\n        \"location\": {\r\n            \"state\": true\r\n        },\r\n        \"map\": {\r\n            \"state\": true\r\n        },\r\n        \"markers\": {\r\n            \"state\": true\r\n        },\r\n        \"results\": {\r\n            \"state\": true\r\n        },\r\n        \"selected\": {\r\n            \"state\": true\r\n        },\r\n        \"service\": {\r\n            \"state\": true\r\n        },\r\n        \"store\": {\r\n            \"context\": \"store\"\r\n        }\r\n    }; }\r\n    static get style() { return \"/**style-placeholder:app-root:**/\"; }\r\n}\r\n"}